MetaSolver(PlatypusSolver(SMPSO, Dict{Symbol,Any}(:mutation_probability => 0.5,:mutation_perturbation => 0.5,:leader_size => 100,:swarm_size => 100), 4000, true), Surrogate[Surrogate(Array{Number}(undef,0,0), Array{Number}(undef,0,0), PyObject RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None,
           min_impurity_decrease=0.0, min_impurity_split=None,
           min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, n_estimators='warn', n_jobs=None,
           oob_score=False, random_state=None, verbose=0, warm_start=False), Tuple{AbstractObjective,Array{Int64,1}}[(Objective(displacement_obj, 1, :MIN), [1]), (Objective(cost, 1, :MIN), [1])], [1, 2], Colon(), ADOPT.ScikitLearnModels.sk_fit!, Dict{Symbol,Any}(), ADOPT.ScikitLearnModels.sk_fit!, 0, 1.0, ADOPT.ScikitLearnModels.sk_predict)], Dict{Symbol,Any}(:nsamples => 420,:sampling_function => ADOPT.Sampling.randomMC), 600, true)
Model(ADOPT.AbstractVariable[IntVariable(1, 6, 3), IntVariable(0, 20, 10)], AbstractObjective[Objective(displacement_obj, 1, :MIN), Objective(cost, 1, :MIN)], Constraint[])
